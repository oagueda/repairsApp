package xyz.oagueda.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RepairAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRepairAllPropertiesEquals(Repair expected, Repair actual) {
        assertRepairAutoGeneratedPropertiesEquals(expected, actual);
        assertRepairAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRepairAllUpdatablePropertiesEquals(Repair expected, Repair actual) {
        assertRepairUpdatableFieldsEquals(expected, actual);
        assertRepairUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRepairAutoGeneratedPropertiesEquals(Repair expected, Repair actual) {
        assertThat(expected)
            .as("Verify Repair auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRepairUpdatableFieldsEquals(Repair expected, Repair actual) {
        assertThat(expected)
            .as("Verify Repair relevant properties")
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getObservations()).as("check observations").isEqualTo(actual.getObservations()))
            .satisfies(
                e -> assertThat(e.getInternalObservations()).as("check internalObservations").isEqualTo(actual.getInternalObservations())
            )
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getClosedDate()).as("check closedDate").isEqualTo(actual.getClosedDate()))
            .satisfies(e -> assertThat(e.getBudget()).as("check budget").isEqualTo(actual.getBudget()))
            .satisfies(e -> assertThat(e.getWorkDone()).as("check workDone").isEqualTo(actual.getWorkDone()))
            .satisfies(e -> assertThat(e.getUsedMaterial()).as("check usedMaterial").isEqualTo(actual.getUsedMaterial()))
            .satisfies(e -> assertThat(e.getCustomerMaterial()).as("check customerMaterial").isEqualTo(actual.getCustomerMaterial()))
            .satisfies(e -> assertThat(e.getImportantData()).as("check importantData").isEqualTo(actual.getImportantData()))
            .satisfies(e -> assertThat(e.getTotal()).as("check total").isEqualTo(actual.getTotal()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRepairUpdatableRelationshipsEquals(Repair expected, Repair actual) {
        assertThat(expected)
            .as("Verify Repair relationships")
            .satisfies(e -> assertThat(e.getDevice()).as("check device").isEqualTo(actual.getDevice()));
    }
}
