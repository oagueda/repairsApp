package xyz.oagueda.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DeviceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeviceAllPropertiesEquals(Device expected, Device actual) {
        assertDeviceAutoGeneratedPropertiesEquals(expected, actual);
        assertDeviceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeviceAllUpdatablePropertiesEquals(Device expected, Device actual) {
        assertDeviceUpdatableFieldsEquals(expected, actual);
        assertDeviceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeviceAutoGeneratedPropertiesEquals(Device expected, Device actual) {
        assertThat(expected)
            .as("Verify Device auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeviceUpdatableFieldsEquals(Device expected, Device actual) {
        assertThat(expected)
            .as("Verify Device relevant properties")
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getBrand()).as("check brand").isEqualTo(actual.getBrand()))
            .satisfies(e -> assertThat(e.getModel()).as("check model").isEqualTo(actual.getModel()))
            .satisfies(e -> assertThat(e.getSerialNumber()).as("check serialNumber").isEqualTo(actual.getSerialNumber()))
            .satisfies(e -> assertThat(e.getWarranty()).as("check warranty").isEqualTo(actual.getWarranty()))
            .satisfies(e -> assertThat(e.getPassword()).as("check password").isEqualTo(actual.getPassword()))
            .satisfies(e -> assertThat(e.getHasPattern()).as("check hasPattern").isEqualTo(actual.getHasPattern()))
            .satisfies(e -> assertThat(e.getSimPinCode()).as("check simPinCode").isEqualTo(actual.getSimPinCode()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()))
            .satisfies(e -> assertThat(e.getDeleted()).as("check deleted").isEqualTo(actual.getDeleted()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeviceUpdatableRelationshipsEquals(Device expected, Device actual) {
        assertThat(expected)
            .as("Verify Device relationships")
            .satisfies(e -> assertThat(e.getPattern()).as("check pattern").isEqualTo(actual.getPattern()))
            .satisfies(e -> assertThat(e.getCustomer()).as("check customer").isEqualTo(actual.getCustomer()));
    }
}
